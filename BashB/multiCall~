#!/bin/bash

a=${1} #This is	a command
b=${2} #This is	also a set of arguments
c=${3} #This is	a file extension
d=${4} #This is	a folder name

#if files with the given extension  do not exist, create it
if [[ -d ${c} ]]; then
    exit
fi

#if the given folder does not exist, create it
if [[ ! -d ${d} ]]; then
	mkdir -p $d	
fi

#if the given folder is not a directory, quit 
if [[ -d ${d} ]]; then
	echo "${d} exists and is a folder."

else
	echo "${d} is NOT a folder. Please input a folder."
fi

#if the script is called with the wrong number of inputs, quit
if [[ ${#} != $3 ]]; then
    echo "not enough arguments. Please insert a command, a set of arguments, a file extension and a folder in that order."
fi
   
#run the command on a combination of all the arguments on all the files in the current folder that has an extension
combos= python 'pythonBashB.py' $2
pythonData= ( $combos )

declare -a fileArray

for file in *.c; do
    fileArray+=${file}+'.'$c
done

for i in $(pythonData[@]); do
   for x in $(pythonData[@]); do
       ./myCmd $pythonData[x] $fileArray[i] >> $d/$fileArray[i]
   done
done
#append whatever prints to the same named file in the given folder
exit#!/bin/bash

a=${1} #This is	a command
b=${2} #This is	also a set of arguments
c=${3} #This is	a file extension
d=${4} #This is	a folder name

#if files with the given extension  do not exist, create it
if [[ -d ${c} ]]; then
    exit

#if the given folder does not exist, create it
if [[ ! -d ${d} ]]; then
	mkdir -p ${d}	
fi

#if the given folder is not a directory, quit 
if [[ -d ${d} ]]; then
	echo "${d} exists and is a folder."

else
	echo "${d} is NOT a folder. Please input a folder."
fi

#if the script is called with the wrong number of inputs, quit
if [[ $ -ne $4 ]]; then
    echo "not enough arguments. Please insert a command, a set of arguments, a file extension and a folder in that order."
fi
   
#run the command on a combination of all the arguments on all the files in the current folder that has an extension
combos ='python pythonBashB.py $2'
pythonData = (${combos})

declare -a fileArray

for file in *.c; do
    $fileArray+=${file}+'.'$c
done

for i in $(pythonData[@]); do
   for x in $(pythonData[@]); do
       ./myCmd $pythonData[x] $fileArray[i] >> $d/$fileArray[i]
   done
done
#append whatever prints to the same named file in the given folder
exit
