#include<iostream>
#include<string>
#include "tree.h"
using namespace std;
/* If nullptr is causing an error then you are not correctly using C++11 */

BST::BST(){
  this->key = -1; // placeholder till you get a real value
  this->left = nullptr; // nullptr is the null pointer.
  this->right = nullptr;
  this->value = "";
}

bool BST::isleaf(){
  return (this->left == nullptr) && (this->right == nullptr);
}

/* Define the functions insert() and search() here according to their declaration in
the tree.h header file. */

/*the insert function*/
void BST::insert(int k, string v){
  if(k < this->key){
    if(this->left = nullptr){
	this->left = new BST;
	this->left->key = k;
	this->left->value = v;
	this->left->left= nullptr;
	this->left->right= nullptr;
    }else{
      cout << this->left->insert(k,v) << endl;
    }
  }
  else{
    if(this->right = nullptr){
      this->right = new BST;
      this->right->key = k;
      this->right->value=v;
      this->right->left= nullptr;
      this->right->right= nullptr;
    }else{
      cout << this->right->insert(k,v)<<endl;
    }
  }
}



int main(){
  BST * t = new BST();

  t->insert(10,"Ten");
  t->insert(5,"Five");
  t->insert(12, "Twelve");
  t->insert(7, "Seven");
  t->insert(4, "Four");
  t->insert(11, "Eleven");
  
  //cout << t->search(5) << endl;
  //cout << t->search(10) << endl;
  //cout << t->search(6) << endl;
  //cout << t->search(7) << endl;
  //cout << t->search(11) << endl;
  
  return 0;
}
